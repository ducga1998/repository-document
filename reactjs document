
all boilerplate link:https://github.com/xgrommx/awesome-redux#boilerplate
these code reactjs enjob
// self-create private with resual very good !!!
const PrivateRoute = ({ component: Component, ...rest }) => (
  <Route
    {...rest}
    render={props =>
      fakeAuth.isAuthenticated ? (
        <Component {...props} />
      ) : (
        <Redirect
          to={{
            pathname: "/login",
            state: { from: props.location }
          }}
        />
      )
    }
  />
);
 <PrivateRoute path="/protected" component={Protected} />
 //end code 
 //begin code package Server, this example about use Promise in javascript. very interting ^^. 
 // include, it is function , two parameter  and return Object Promise, 
 // when resolve then return patch. 
 packageServer(config, rootDir) {
        return new Promise((resolve, reject) => {

            let path = process.cwd() + '/example.zip';
            var output = fs.createWriteStream(path);

            var archive = archiver('zip', {
                zlib: { level: 9 } // Sets the compression level.
            });

            archive.on('error', function(err) {
                throw err;
            });
            output.on('close', function() {
                resolve(path);
            });

            archive.pipe(output);

            config.staticAssets.forEach(({dir, as}) => {
                archive.directory(rootDir + "/" + dir, as);
            });
            archive.append(JSON.stringify(config), {name: "prototype-server.json"});
            archive.append(fs.createReadStream(rootDir + "/" + config.index), {name: "index.html"});

            archive.finalize();
        });
    }
